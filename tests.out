;;; R5RS
;;; 1. Overview of Scheme
;;; 1.3. Notation and terminology
;;; 1.3.4. Evaluation examples
40
";;; 2. Lexical conventions"
";;; 2.2. Whitespace and comments"
3628800
;;; 4. Expressions
;;; 4.1. Primitive expression types
;;; 4.1.1. Variable references
28
;;; 4.1.2. Literal expressions
a
#(a b c)
(+ 1 2)
a
#(a b c)
()
(+ 1 2)
(quote a)
(quote a)
"abc"
"abc"
145932
145932
#t
#t
;;; 4.1.3. Procedure calls
7
12
;;; 4.1.4. Procedures
#<procedure>
8
3
10
;;; 4.1.5. Conditionals
yes
no
1
;;; 4.1.6. Assignments
3
#<void>
5
;;; 4.2. Derived expression types
;;; 4.2.1. Conditionals
greater
equal
2
composite
#<void>
consonant
#t
#f
(f g)
#t
#t
#t
#f
(b c)
;;; 4.2.2. Binding constructs
6
35
70
#t
;;; 4.2.3. Sequencing
6
4 plus 1 equals 5
#(0 1 2 3 4)
25
((6 1 3) (-5 -2))
;;; 4.2.6. Quasiquotation
(list 3 4)
(list a (quote a))
(a 3 4 5 6 b)
((foo 7) . cons)
#(10 5 2 4 3 8)
(list 3 4)
(quasiquote (list (unquote (+ 1 2)) 4))
;;; 4.3. Macros
;;; 4.3.1. Binding constructs for syntactic keywords
;;; 4.3.2. Pattern language
ok
;;; 5. Program structure
;;; 5.1. Programs
;;; 5.2. Definitions
;;; 5.2.1. Top level definitions
6
1
;;; 6. Standard procedures
;;; 6.1. Equivalence predicates
#t
#f
#t
#f
#t
#t
#t
#f
#f
#f
#t
#t
#f
#f
#f
#t
#f
#t
#f
#f
#f
#f
#f
#f
#t
#t
#f
#f
#f
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#f
;;; 6.2. Numbers
;;; 6.2.5. Numerical operations
#t
#t
#t
4
4.000000
7
-1
7
#t
1
1
3
-1
-3
1
-1
-1
-1.000000
4
288
288.000000
-5.000000
-4.000000
-4.000000
-4.000000
3.000000
4.000000
3.000000
4.000000
7
;;; 6.2.6. Numerical input and output
#t
100
256
100.000000
;;; 6.3. Other data types
;;; 6.3.1. Booleans
#t
#f
#f
#f
#f
#f
#t
#f
#f
#f
#t
#f
#f
;;; 6.3.2. Pairs and lists
(a b c)
#t
#<void>
(a . 4)
#t
(a . 4)
#f
#<void>
#t
#t
#f
#f
(a)
((a) b c d)
("a" b c)
(a . 3)
((a b) . c)
a
(a)
1
(b c d)
2
#<void>
#t
#t
#f
(a 7 c)
()
3
3
0
(x y)
(a b c d)
(a (b) (c))
(a b c . d)
a
(c b a)
((e (f)) d (b c) a)
c
c
(a b c)
(b c)
#f
#f
((a) c)
(101 102)
(101 102)
(a 1)
(b 2)
#f
#f
((a))
(5 7)
(5 7)
;;; 6.3.3. Symbols
#t
#t
#f
#t
#f
#f
"flying-fish"
"martin"
"Malvina"
#t
mISSISSIppi
#f
#t
#t
;;; 6.3.4. Characters
#t
#t
;;; 6.3.5. Strings
"The word \"recursion\" has many meanings."
#<void>
;;; 6.3.6. Vectors
#(0 (2 2 2 2) "Anna")
#(a b c)
8
13
#(0 ("Sue" "Sue") "Anna")
(dah dah didah)
#(dididit dah)
;;; 6.4. Control features
#t
#f
#t
#f
#t
7
30
(b e h)
(1 4 27 256 3125)
#(0 1 4 9 16)
3
(3 3)
2
#<promise>
6
#<promise>
6
#f
#f
-3
4
#f
5
;;; 6.5. Eval
21
20
;;; R7RS
;;; 4. Expressions
;;; 4.2. Derived expression types
;;; 4.2.1. Conditionals
c
12
#<void>
#<void>
;;; 4.2.5. Delayed evaluation
2
5
#<promise>
;;; 4.2.6. Dynamic bindings
"12"
"c"
"12"
;;; 4.2.7. Exception handling
42
(b . 23)
;;; 4.2.9. Case-lambda
(0 1 2)
(3 4)
;;; 5.5. Record-type definitions
#t
#f
1
2
3
;;; 6.2. Numbers
;;; 6.2.6. Numerical operations
#t
#f
#t
#f
#f
#t
#f
#t
#f
1764
4.000000
(2 . 0)
(2 . 1)
;;; 6.4. Pairs and lists
(3 3)
(one two three)
("b" "c")
(2 4)
(3 8 2 8)
(1 8 2 8)
;;; 6.6. Characters
3
#f
;;; 6.7. Strings
"Another example:\ntwo lines of text"
"Here's text containing just one line"
"a is named GREEK SMALL LETTER ALPHA."
"a12de"
;;; 6.8. Vectors
(dah)
#(#\A #\B #\C)
"123"
#(3 8 2 8)
#(8 2)
#(10 1 2 40 50)
#(a b c d e f)
#(1 2 smash smash 5)
;;; 6.9. Bytevectors
#u8(12 12)
#u8(1 3 5 1 3 5)
#u8()
8
#u8(1 3 3 4)
#u8(3 4)
#u8(10 1 2 40 50)
#u8(0 1 2 3 4 5)
"A"
#u8(65)
;;; 6.10. Control features
"IBM"
#(b e h)
#(1 4 27 256 3125)
;;; 6.11. Exceptions
condition: an-error
exception
should be a number
65
