syntax: <variable>
syntax: <constant>
syntax: (<operator> <operand1> ...)
syntax: lambda <formals> <body>
syntax: if <test> <consequent> <alternate>
syntax: set! <variable> <expression>
procedure: eqv? obj1 obj2
procedure: number? obj
procedure: integer? obj
procedure: = z1 z2
procedure: < x1 x2
procedure: > x1 x2
procedure: <= x1 x2
procedure: >= x1 x2
procedure: + z1 z2
procedure: * z1 z2
procedure: - z1 z2
procedure: / z1 z2
procedure: number->string z
procedure: string->number string
procedure: pair? obj
procedure: cons obj1 obj2
procedure: car pair
procedure: cdr pair
procedure: set-car! pair obj
procedure: set-cdr! pair obj
procedure: symbol? obj
procedure: symbol->string symbol
procedure: string->symbol string
procedure: string? obj
procedure: make-string k char
procedure: string-length string
procedure: string-ref string k
procedure: string-set! string k char
procedure: vector? obj
procedure: make-vector k fill
procedure: vector-length vector
procedure: vector-ref vector k
procedure: vector-set! vector k obj
library procedure: not obj
library procedure: boolean? obj
library procedure: null? obj
library procedure: length list
library procedure: read
library procedure: display obj
